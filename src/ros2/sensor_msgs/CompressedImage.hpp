// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file CompressedImage.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _SENSOR_MSGS_COMPRESSED_IMAGE_HPP_
#define _SENSOR_MSGS_COMPRESSED_IMAGE_HPP_

#include "../topic.hpp"

#include "../std_msgs/Header.hpp"

namespace sensor_msgs
{

    class CompressedImage : public ros2::Topic<CompressedImage>
    {
    public:
        std_msgs::Header header;
        char format[255];
        uint8_t data[10000];
        uint32_t data_size;

        CompressedImage() : Topic("sensor_msgs::msg::dds_::CompressedImage_", "CompressedImage", SENSOR_MSGS_COMPRESSED_IMAGE_ID),
                            header(), data_size(0)
        {
            memset(format, 0, sizeof(format));
            memset(data, 0, sizeof(data));
        }

        bool serialize(void *msg_buf, const CompressedImage *topic)
        {
            ucdrBuffer *writer = (ucdrBuffer *)msg_buf;
            (void)header.serialize(writer, &topic->header);
            (void)ucdr_serialize_string(writer, topic->format);
            (void)ucdr_serialize_sequence_uint8_t(writer, topic->data, topic->data_size);

            return !writer->error;
        }

        bool deserialize(void *msg_buf, CompressedImage *topic)
        {
            ucdrBuffer *reader = (ucdrBuffer *)msg_buf;
            (void)header.deserialize(reader, &topic->header);
            (void)ucdr_deserialize_string(reader, topic->format, sizeof(topic->format));
            (void)ucdr_deserialize_sequence_uint8_t(reader, topic->data, 10000, &topic->data_size);

            return !reader->error;
        }

        uint32_t size_of_topic(const CompressedImage *topic, uint32_t size)
        {
            uint32_t previousSize = size;
            size += header.size_of_topic(&topic->header, size);
            size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->format) + 1);
            size += ucdr_alignment(size, 4) + 4 + (topic->data_size * 1);

            return size - previousSize;
        }
    };

} // namespace sensor_msgs

#endif // _SENSOR_MSGS_COMPRESSED_IMAGE_HPP_
